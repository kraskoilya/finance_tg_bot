const { addOperation: addToNotion, getExpensesReport } = require('../notion')
const {
  getTypeKeyboard,
  getCurrencyKeyboard,
  getAmountKeyboard,
  getReportPeriodKeyboard,
} = require('./keyboard')
const { getState, setState, resetState, addHistory } = require('./state')

async function handleAmountInput(bot, msg, user) {
  const chatId = msg.chat.id
  const state = getState(chatId)
  const match = msg.text.match(/^\s*([\d.,]+)\s*(.*)$/)
  let amount = null,
    comment = ''
  if (match) {
    amount = parseFloat(match[1].replace(',', '.'))
    comment = match[2] ? match[2].trim() : ''
  }
  if (!amount || isNaN(amount) || amount <= 0) {
    bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12.5 —Ç–∞–∫—Å–∏).', {
      reply_markup: getAmountKeyboard(),
    })
    return
  }
  state.amount = amount
  state.comment = comment
  state.user = user
  const now = new Date()
  const dateStr = now.toISOString().split('T')[0]
  addHistory(chatId, {
    type: state.type,
    currency: state.currency,
    amount: state.amount,
    comment: state.comment,
    user: state.user,
    date: dateStr,
  })
  try {
    await addToNotion({
      type: state.type,
      currency: state.currency,
      amount: state.amount,
      comment: state.comment,
      user: state.user,
      date: dateStr,
    })
    bot
      .sendMessage(
        chatId,
        `‚úÖ *–ó–∞–ø–∏—Å–∞–Ω–æ –≤ Notion!*

        *–¢–∏–ø:* ${state.type}
        *–í–∞–ª—é—Ç–∞:* ${
          state.currency === '–ª–∞—Ä–∏'
            ? 'üá¨üá™'
            : state.currency === '–¥–æ–ª–ª–∞—Ä'
            ? 'üá∫üá∏'
            : state.currency === '—Ä—É–±–ª—å'
            ? 'üá∑üá∫'
            : ''
        } ${state.currency}
        *–°—É–º–º–∞:* *${state.amount}*
        *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* _${state.comment || '‚Äî'}_
        üìÖ *–î–∞—Ç–∞:* ${dateStr}`,
        { parse_mode: 'Markdown' }
      )
      .then(() => {
        resetState(chatId)
        bot.sendMessage(chatId, '–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É –æ–ø–µ—Ä–∞—Ü–∏—é?', {
          reply_markup: getTypeKeyboard(),
        })
      })
  } catch (err) {
    let userMsg = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Notion.'
    if (err && err.body && err.body.code === 'validation_error') {
      if (err.body.message && err.body.message.includes('select option')) {
        userMsg =
          '–û—à–∏–±–∫–∞: –≤ –±–∞–∑–µ Notion –Ω–µ –∑–∞–≤–µ–¥–µ–Ω–æ –Ω—É–∂–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è select (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–∞–ª—é—Ç–∞ –∏–ª–∏ —Ç–∏–ø). –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é –≤ Notion.'
      } else {
        userMsg = '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Notion. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –∏ –∑–Ω–∞—á–µ–Ω–∏—è.'
      }
    } else if (err && err.body && err.body.code === 'object_not_found') {
      userMsg =
        '–û—à–∏–±–∫–∞: –±–∞–∑–∞ Notion –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.'
    } else if (err && err.body && err.body.message) {
      userMsg += '\n' + err.body.message
    }
    console.error('Notion error:', err.body || err)
    bot.sendMessage(chatId, userMsg)
  }
}

function handleType(bot, chatId, type) {
  setState(chatId, { type })
  bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:', {
    reply_markup: getCurrencyKeyboard(),
  })
}

function handleCurrency(bot, chatId, currency) {
  const state = getState(chatId)
  state.currency = currency
  setState(chatId, state)
  bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):', {
    reply_markup: getAmountKeyboard(),
  })
}

async function handleReport(bot, chatId, period) {
  let startDate, endDate
  const now = new Date()
  if (period === 'week') {
    endDate = now.toISOString().split('T')[0]
    const weekAgo = new Date(now)
    weekAgo.setDate(now.getDate() - 6)
    startDate = weekAgo.toISOString().split('T')[0]
  } else if (period === 'month') {
    endDate = now.toISOString().split('T')[0]
    startDate = now.toISOString().slice(0, 8) + '01'
  }
  try {
    const { sums, startDate: s, endDate: e } = await getExpensesReport({ startDate, endDate })
    const currencyEmojis = { –ª–∞—Ä–∏: 'üá¨üá™', –¥–æ–ª–ª–∞—Ä: 'üá∫üá∏', —Ä—É–±–ª—å: 'üáßüáæ' }
    let text = `üìä *–†–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–µ—Ä–∏–æ–¥* _${s} ‚Äî ${e}_:`
    if (Object.keys(sums).length === 0) {
      text += '\n\n‚ùóÔ∏è –ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.'
    } else {
      for (const [cur, sum] of Object.entries(sums)) {
        text += `\n${currencyEmojis[cur] || ''} *${
          cur.charAt(0).toUpperCase() + cur.slice(1)
        }*: *${sum}*`
      }
    }
    bot.sendMessage(chatId, text, { parse_mode: 'Markdown' })
  } catch (err) {
    console.error('Notion report error:', err.body || err)
    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞ –∏–∑ Notion.')
  }
}

module.exports = {
  handleAmountInput,
  handleType,
  handleCurrency,
  handleReport,
}
