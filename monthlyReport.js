const cron = require('node-cron')
const { NOTION_DATABASE_ID, ALLOWED_USER_ID_1, ALLOWED_USER_ID_2, USERS } = require('./config')
const { Client } = require('@notionhq/client')

function initMonthlyReport(bot) {
  // –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç: 1-–≥–æ —á–∏—Å–ª–∞ –≤ 00:05 (–∑–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü)
  cron.schedule('5 0 1 * *', async () => {
    const users = [ALLOWED_USER_ID_1, ALLOWED_USER_ID_2]
    const userNames = USERS
    const now = new Date()
    const year = now.getMonth() === 0 ? now.getFullYear() - 1 : now.getFullYear()
    const month = now.getMonth() === 0 ? 12 : now.getMonth()
    const startDate = `${year}-${String(month).padStart(2, '0')}-01`
    const endDate = `${year}-${String(month).padStart(2, '0')}-${new Date(
      year,
      month,
      0
    ).getDate()}`

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞ –º–µ—Å—è—Ü –∏–∑ Notion
    const notionClient = new Client({ auth: process.env.NOTION_TOKEN })
    const response = await notionClient.databases.query({
      database_id: NOTION_DATABASE_ID,
      filter: {
        and: [{ property: '–î–∞—Ç–∞', date: { on_or_after: startDate, on_or_before: endDate } }],
      },
      page_size: 100,
    })
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    const userOps = {}
    for (const page of response.results) {
      const props = page.properties
      const user = props['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å']?.select?.name
      const currency = props['–í–∞–ª—é—Ç–∞']?.select?.name
      const amount = props['–°—É–º–º–∞']?.number || 0
      const comment = props['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']?.title?.[0]?.plain_text || ''
      const date = props['–î–∞—Ç–∞']?.date?.start
      if (!user) continue
      if (!userOps[user]) userOps[user] = []
      userOps[user].push({ amount, currency, comment, date })
    }
    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
    const currencyEmojis = { –ª–∞—Ä–∏: 'üá¨üá™', –¥–æ–ª–ª–∞—Ä: 'üá∫üá∏', —Ä—É–±–ª—å: 'üáßüáæ' }
    let report = 'üìä *–†–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü:*\n'
    for (const user of Object.values(userNames)) {
      const ops = userOps[user] || []
      const sums = { –ª–∞—Ä–∏: 0, –¥–æ–ª–ª–∞—Ä: 0, —Ä—É–±–ª—å: 0 }
      let maxOp = null
      for (const op of ops) {
        if (sums[op.currency] !== undefined) sums[op.currency] += op.amount
        if (!maxOp || op.amount > maxOp.amount) maxOp = op
      }
      report += `\n*${user}:*\n`
      for (const cur of ['–ª–∞—Ä–∏', '–¥–æ–ª–ª–∞—Ä', '—Ä—É–±–ª—å']) {
        report += `${currencyEmojis[cur] || ''} ${cur.charAt(0).toUpperCase() + cur.slice(1)} ‚Äî *${
          sums[cur]
        }*\n`
      }
      if (maxOp) {
        report += `üîù –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞—Å—Ö–æ–¥: *${maxOp.amount}* ‚Äî _${
          maxOp.comment || '–±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'
        }_\n`
      } else {
        report += '–ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü\n'
      }
    }
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    for (const userId of users) {
      await bot.sendMessage(userId, report, { parse_mode: 'Markdown' })
    }
  })
}

module.exports = { initMonthlyReport }
